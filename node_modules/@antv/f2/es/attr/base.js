import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { mix, isFunction, isNil, isArray, valuesOfKey } from '@antv/util';
var Base = /*#__PURE__*/function () {
  function Base(options) {
    _classCallCheck(this, Base);
    mix(this, options);
    var scale = this.scale,
      field = this.field,
      data = this.data;
    if (!scale && data) {
      var values = valuesOfKey(data, field);
      this.scale = this.createScale({
        values: values,
        field: field
      });
    }
  }
  _createClass(Base, [{
    key: "createScale",
    value: function createScale(_scaleConfig) {
      return null;
    }
    // 数据映射方法
  }, {
    key: "_mapping",
    value: function _mapping(value) {
      return value;
    }
  }, {
    key: "update",
    value: function update(options) {
      mix(this, options);
    }
  }, {
    key: "setRange",
    value: function setRange(range) {
      this.range = range;
    }
    // 归一化，参数是原始数据，返回是归一化的数据
  }, {
    key: "normalize",
    value: function normalize(value) {
      var scale = this.scale;
      if (isArray(value)) {
        return value.map(function (v) {
          return scale.scale(v);
        });
      }
      return scale.scale(value);
    }
    // convert 参数是归一化的数据，返回定义域的值
  }, {
    key: "convert",
    value: function convert(value) {
      return value;
    }
    // 等于 normalize + convert， 参数是原始数据，返回是定义域的值
  }, {
    key: "mapping",
    value: function mapping(value) {
      var child = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var rst = isFunction(this.callback) ? this.callback(value, child) : null;
      if (!isNil(rst)) {
        return rst;
      }
      return this._mapping(value);
    }
  }]);
  return Base;
}();
export default Base;
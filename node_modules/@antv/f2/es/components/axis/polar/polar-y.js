import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { jsx } from '../../../jsx';
import { Vector2 } from '@antv/f2-graphic';
export default (function (props) {
  var ticks = props.ticks,
    coord = props.coord,
    style = props.style,
    gridType = props.grid;
  var center = coord.center;
  var grid = style.grid,
    tickLine = style.tickLine,
    line = style.line,
    labelOffset = style.labelOffset,
    label = style.label;
  return jsx("group", null, grid ? ticks.map(function (tick) {
    var points = tick.points,
      gridStyle = tick.gridStyle,
      gridPoints = tick.gridPoints;
    var end = points[points.length - 1];
    if (gridType !== 'line') {
      return jsx("arc", {
        attrs: _objectSpread(_objectSpread({
          x: center.x,
          y: center.y,
          r: Vector2.length([end.x - center.x, end.y - center.y])
        }, grid), gridStyle)
      });
    }
    return jsx("polyline", {
      attrs: _objectSpread(_objectSpread({
        points: gridPoints
      }, grid), gridStyle)
    });
  }) : null, tickLine && tickLine.length ? ticks.map(function (tick) {
    var points = tick.points;
    var end = points[points.length - 1];
    return jsx("line", {
      attrs: _objectSpread({
        x1: end.x,
        y1: end.y,
        x2: end.x - tickLine.length,
        y2: end.y
      }, tickLine)
    });
  }) : null, line ? jsx("line", {
    attrs: _objectSpread({
      x1: ticks[0].points[0].x,
      y1: ticks[0].points[0].y,
      x2: ticks[ticks.length - 1].points[0].x,
      y2: ticks[ticks.length - 1].points[0].y
    }, line)
  }) : null, label ? ticks.map(function (tick) {
    var points = tick.points,
      text = tick.text,
      labelStyle = tick.labelStyle;
    var end = points[points.length - 1];
    return jsx("text", {
      attrs: _objectSpread(_objectSpread({
        x: end.x - labelOffset,
        y: end.y,
        text: text,
        textAlign: 'right',
        textBaseline: 'middle'
      }, label), labelStyle)
    });
  }) : null);
});
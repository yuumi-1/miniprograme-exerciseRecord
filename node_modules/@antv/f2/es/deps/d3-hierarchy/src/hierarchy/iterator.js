import _regeneratorRuntime from "@babel/runtime/regenerator";
var _marked = /*#__PURE__*/_regeneratorRuntime.mark(_callee);
export default function _callee() {
  var node, current, next, children, i, n;
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        node = this, next = [node];
      case 1:
        current = next.reverse(), next = [];
      case 2:
        if (!(node = current.pop())) {
          _context.next = 8;
          break;
        }
        _context.next = 5;
        return node;
      case 5:
        if (children = node.children) {
          for (i = 0, n = children.length; i < n; ++i) {
            next.push(children[i]);
          }
        }
        _context.next = 2;
        break;
      case 8:
        if (next.length) {
          _context.next = 1;
          break;
        }
      case 9:
      case "end":
        return _context.stop();
    }
  }, _marked, this);
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _scale = require("@antv/scale");
var _util = require("@antv/util");
var _src = require("../deps/d3-interpolate/src");
var _base = _interopRequireDefault(require("./base"));
var Linear = /*#__PURE__*/function (_Base) {
  (0, _inherits2.default)(Linear, _Base);
  var _super = (0, _createSuper2.default)(Linear);
  function Linear(options) {
    var _this;
    (0, _classCallCheck2.default)(this, Linear);
    _this = _super.call(this, options);
    _this._updateInterpolate();
    return _this;
  }
  (0, _createClass2.default)(Linear, [{
    key: "createScale",
    value: function createScale(scaleConfig) {
      return new _scale.Linear(scaleConfig);
    }
  }, {
    key: "_updateInterpolate",
    value: function _updateInterpolate() {
      var _this$range = (0, _slicedToArray2.default)(this.range, 2),
        min = _this$range[0],
        max = _this$range[1];
      this.interpolate = (0, _src.interpolate)(min, max);
    }
  }, {
    key: "update",
    value: function update(options) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Linear.prototype), "update", this).call(this, options);
      this._updateInterpolate();
    }
  }, {
    key: "_mapping",
    value: function _mapping(value) {
      var scale = this.scale,
        interpolate = this.interpolate;
      if ((0, _util.isArray)(value)) {
        return value.map(function (v) {
          return interpolate(scale.scale(v));
        });
      }
      return interpolate(scale.scale(value));
    }
  }, {
    key: "normalize",
    value: function normalize(value) {
      var scale = this.scale;
      if ((0, _util.isArray)(value)) {
        return value.map(function (v) {
          return scale.scale(v);
        });
      }
      return scale.scale(value);
    }
  }, {
    key: "convert",
    value: function convert(value) {
      var range = this.range;
      var _range = (0, _slicedToArray2.default)(range, 2),
        min = _range[0],
        max = _range[1];
      if ((0, _util.isArray)(value)) {
        return value.map(function (v) {
          return min + (max - min) * v;
        });
      }
      return min + (max - min) * value;
    }
  }]);
  return Linear;
}(_base.default);
var _default = exports.default = Linear;
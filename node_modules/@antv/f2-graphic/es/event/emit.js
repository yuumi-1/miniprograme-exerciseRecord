import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
// 实现简单的事件机制
import { isObject } from '@antv/util';
// 多个事件分隔符
var TYPE_SEP = ' ';
var EventEmit = /*#__PURE__*/function () {
  function EventEmit() {
    _classCallCheck(this, EventEmit);
    this.__events = {};
  }
  _createClass(EventEmit, [{
    key: "on",
    value: function on(type, listener) {
      var _this = this;
      if (!type || !listener) {
        return;
      }
      type.split(TYPE_SEP).forEach(function (item) {
        var events = _this.__events[item] || [];
        events.push(listener);
        _this.__events[item] = events;
      });
    }
  }, {
    key: "emit",
    value: function emit(type, e) {
      var _this2 = this;
      if (isObject(type)) {
        e = type;
        type = e && e.type;
      }
      if (!type) {
        return;
      }
      var events = this.__events[type];
      if (!events || !events.length) {
        return;
      }
      events.forEach(function (listener) {
        listener.call(_this2, e);
      });
    }
  }, {
    key: "off",
    value: function off(type, listener) {
      var __events = this.__events;
      type.split(TYPE_SEP).forEach(function (item) {
        var events = __events[item];
        if (!events || !events.length) {
          return;
        }
        // 如果没有指定方法，则删除所有项
        if (!listener) {
          delete __events[item];
          return;
        }
        // 删除指定的 listener
        for (var i = 0, len = events.length; i < len; i++) {
          if (events[i] === listener) {
            events.splice(i, 1);
            i--;
          }
        }
      });
    }
  }]);
  return EventEmit;
}();
export default EventEmit;
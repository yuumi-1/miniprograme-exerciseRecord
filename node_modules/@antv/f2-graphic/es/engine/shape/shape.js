import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { isNil } from '@antv/util';
import Element from '../element';
var Shape = /*#__PURE__*/function (_Element) {
  _inherits(Shape, _Element);
  var _super = _createSuper(Shape);
  function Shape() {
    _classCallCheck(this, Shape);
    return _super.apply(this, arguments);
  }
  _createClass(Shape, [{
    key: "_initProperties",
    value: /* eslint-enable */
    function _initProperties() {
      this._attrs = _objectSpread(_objectSpread({}, this._attrs), {}, {
        zIndex: 0,
        visible: true,
        destroyed: false,
        isShape: true,
        attrs: {}
      });
    }
  }, {
    key: "getType",
    value: function getType() {
      return this._attrs.type;
    }
  }, {
    key: "drawInner",
    value: function drawInner(context) {
      var attrs = this.get('attrs');
      this.createPath(context);
      var originOpacity = context.globalAlpha;
      if (this.hasFill()) {
        var fillOpacity = attrs.fillOpacity;
        if (!isNil(fillOpacity) && fillOpacity !== 1) {
          context.globalAlpha = fillOpacity;
          context.fill();
          context.globalAlpha = originOpacity;
        } else {
          context.fill();
        }
      }
      if (this.hasStroke()) {
        var lineWidth = attrs.lineWidth;
        if (lineWidth > 0) {
          var strokeOpacity = attrs.strokeOpacity;
          if (!isNil(strokeOpacity) && strokeOpacity !== 1) {
            context.globalAlpha = strokeOpacity;
          }
          context.stroke();
        }
      }
    }
  }, {
    key: "getBBox",
    value: function getBBox() {
      var bbox = this._attrs.bbox;
      if (!bbox) {
        bbox = this.calculateBox();
        if (bbox) {
          bbox.x = bbox.minX;
          bbox.y = bbox.minY;
          bbox.width = bbox.maxX - bbox.minX;
          bbox.height = bbox.maxY - bbox.minY;
        }
        this._attrs.bbox = bbox;
      }
      return bbox;
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      return null;
    }
  }, {
    key: "createPath",
    value: function createPath(_context) {}
  }]);
  return Shape;
}(Element);
export default Shape;
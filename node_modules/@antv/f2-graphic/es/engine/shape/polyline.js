import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _get from "@babel/runtime/helpers/esm/get";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import Shape from './shape';
import { getBBoxFromPoints, getBBoxFromBezierGroup } from '../../util/bbox';
import * as Smooth from '../../util/smooth';
// filter the point which x or y is NaN
function _filterPoints(points) {
  var filteredPoints = [];
  for (var i = 0, len = points.length; i < len; i++) {
    var point = points[i];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      filteredPoints.push(point);
    }
  }
  return filteredPoints;
}
var Polyline = /*#__PURE__*/function (_Shape) {
  _inherits(Polyline, _Shape);
  var _super = _createSuper(Polyline);
  function Polyline() {
    _classCallCheck(this, Polyline);
    return _super.apply(this, arguments);
  }
  _createClass(Polyline, [{
    key: "_initProperties",
    value: function _initProperties() {
      _get(_getPrototypeOf(Polyline.prototype), "_initProperties", this).call(this);
      this._attrs.canFill = true;
      this._attrs.canStroke = true;
      this._attrs.type = 'polyline';
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {
        points: null,
        lineWidth: 1,
        smooth: false
      };
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      var points = attrs.points,
        smooth = attrs.smooth;
      var filteredPoints = _filterPoints(points);
      context.beginPath();
      if (filteredPoints.length) {
        context.moveTo(filteredPoints[0].x, filteredPoints[0].y);
        if (smooth) {
          var constaint = [[0, 0], [1, 1]];
          var sps = Smooth.smooth(filteredPoints, false, constaint);
          for (var i = 0, n = sps.length; i < n; i++) {
            var sp = sps[i];
            context.bezierCurveTo(sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]);
          }
        } else {
          var _i;
          var l;
          for (_i = 1, l = filteredPoints.length - 1; _i < l; _i++) {
            context.lineTo(filteredPoints[_i].x, filteredPoints[_i].y);
          }
          context.lineTo(filteredPoints[l].x, filteredPoints[l].y);
        }
      }
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      var attrs = this.get('attrs');
      var points = attrs.points,
        smooth = attrs.smooth,
        lineWidth = attrs.lineWidth;
      var filteredPoints = _filterPoints(points);
      if (smooth) {
        var newPoints = [];
        var constaint = [[0, 0], [1, 1]];
        var sps = Smooth.smooth(filteredPoints, false, constaint);
        for (var i = 0, n = sps.length; i < n; i++) {
          var sp = sps[i];
          if (i === 0) {
            newPoints.push([filteredPoints[0].x, filteredPoints[0].y, sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);
          } else {
            var lastPoint = sps[i - 1];
            newPoints.push([lastPoint[5], lastPoint[6], sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);
          }
        }
        return getBBoxFromBezierGroup(newPoints, lineWidth);
      }
      return getBBoxFromPoints(filteredPoints, lineWidth);
    }
  }]);
  return Polyline;
}(Shape);
export default Polyline;
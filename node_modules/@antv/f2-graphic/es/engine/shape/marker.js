import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _get from "@babel/runtime/helpers/esm/get";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
/**
 * marker shapesï¼Œused for tooltip and legend
 */
import { isFunction } from '@antv/util';
import Shape from './shape';
var SYMBOLS = {
  circle: function circle(x, y, r, ctx) {
    ctx.arc(x, y, r, 0, Math.PI * 2, false);
  },
  square: function square(x, y, r, ctx) {
    ctx.moveTo(x - r, y - r);
    ctx.lineTo(x + r, y - r);
    ctx.lineTo(x + r, y + r);
    ctx.lineTo(x - r, y + r);
    ctx.closePath();
  }
};
var Marker = /*#__PURE__*/function (_Shape) {
  _inherits(Marker, _Shape);
  var _super = _createSuper(Marker);
  function Marker() {
    _classCallCheck(this, Marker);
    return _super.apply(this, arguments);
  }
  _createClass(Marker, [{
    key: "_initProperties",
    value: function _initProperties() {
      _get(_getPrototypeOf(Marker.prototype), "_initProperties", this).call(this);
      this._attrs.canFill = true;
      this._attrs.canStroke = true;
      this._attrs.type = 'marker';
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {
        x: 0,
        y: 0,
        lineWidth: 0
      };
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        radius = attrs.radius;
      var symbol = attrs.symbol || 'circle';
      var method;
      if (isFunction(symbol)) {
        method = symbol;
      } else {
        method = SYMBOLS[symbol];
      }
      context.beginPath();
      method(x, y, radius, context, this);
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        radius = attrs.radius;
      return {
        minX: x - radius,
        minY: y - radius,
        maxX: x + radius,
        maxY: y + radius
      };
    }
  }]);
  return Marker;
}(Shape);
export default Marker;
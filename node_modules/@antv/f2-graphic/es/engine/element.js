import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { isArray, isObject, mix } from '@antv/util';
import { remove as arrayRemove } from '../util/array';
import MatrixUtil from '../util/matrix';
import { parseStyle } from '../util/style-parse';
import Vector2 from '../util/vector2';
var ALIAS_ATTRS_MAP = {
  stroke: 'strokeStyle',
  fill: 'fillStyle',
  opacity: 'globalAlpha'
};
var SHAPE_ATTRS = ['fillStyle', 'font', 'globalAlpha', 'lineCap', 'lineWidth', 'lineJoin', 'miterLimit', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY', 'strokeStyle', 'textAlign', 'textBaseline', 'lineDash', 'shadow' // 兼容支付宝小程序
];

var CLIP_SHAPES = ['circle', 'sector', 'polygon', 'rect', 'polyline', 'custom'];
var Element = /*#__PURE__*/function () {
  function Element(cfg) {
    _classCallCheck(this, Element);
    this._initProperties();
    mix(this._attrs, cfg);
    var attrs = this._attrs.attrs;
    if (attrs) {
      this.initAttrs(attrs);
    }
    this.initTransform();
  }
  _createClass(Element, [{
    key: "_initProperties",
    value: function _initProperties() {
      this._attrs = _objectSpread(_objectSpread({}, this._attrs), {}, {
        zIndex: 0,
        visible: true,
        destroyed: false
      });
    }
  }, {
    key: "get",
    value: function get(name) {
      return this._attrs[name];
    }
  }, {
    key: "set",
    value: function set(name, value) {
      this._attrs[name] = value;
    }
  }, {
    key: "isGroup",
    value: function isGroup() {
      return this.get('isGroup');
    }
  }, {
    key: "isShape",
    value: function isShape() {
      return this.get('isShape');
    }
  }, {
    key: "initAttrs",
    value: function initAttrs(attrs) {
      this.attr(mix(this.getDefaultAttrs(), attrs));
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {};
    }
  }, {
    key: "_setAttr",
    value: function _setAttr(name, value) {
      var attrs = this._attrs.attrs;
      if (name === 'clip') {
        value = this._setAttrClip(value);
      } else {
        var alias = ALIAS_ATTRS_MAP[name];
        if (alias) {
          attrs[alias] = value;
        }
      }
      attrs[name] = value;
    }
  }, {
    key: "_getAttr",
    value: function _getAttr(name) {
      var _this$_attrs, _this$_attrs$attrs;
      return (_this$_attrs = this._attrs) === null || _this$_attrs === void 0 ? void 0 : (_this$_attrs$attrs = _this$_attrs.attrs) === null || _this$_attrs$attrs === void 0 ? void 0 : _this$_attrs$attrs[name];
    }
  }, {
    key: "_afterAttrsSet",
    value: function _afterAttrsSet() {}
  }, {
    key: "_setAttrClip",
    value: function _setAttrClip(clip) {
      if (clip && CLIP_SHAPES.indexOf(clip._attrs.type) > -1) {
        if (clip.get('canvas') === null) {
          clip = _objectSpread({}, clip);
        }
        clip.set('parent', this.get('parent'));
        clip.set('context', this.get('context'));
        return clip;
      }
      return null;
    }
  }, {
    key: "attr",
    value: function attr(name, value) {
      if (this.get('destroyed')) return null;
      var argumentsLen = arguments.length;
      if (argumentsLen === 0) {
        return this._attrs.attrs;
      }
      if (isObject(name)) {
        this._attrs.bbox = null;
        for (var k in name) {
          this._setAttr(k, name[k]);
        }
        if (this._afterAttrsSet) {
          this._afterAttrsSet();
        }
        return this;
      }
      if (argumentsLen === 2) {
        this._attrs.bbox = null;
        this._setAttr(name, value);
        if (this._afterAttrsSet) {
          this._afterAttrsSet();
        }
        return this;
      }
      return this._getAttr(name);
    }
  }, {
    key: "getParent",
    value: function getParent() {
      return this.get('parent');
    }
  }, {
    key: "draw",
    value: function draw(context) {
      if (this.get('destroyed')) {
        return;
      }
      if (this.get('visible')) {
        this.setContext(context);
        this.drawInner(context);
        this.restoreContext(context);
      }
    }
  }, {
    key: "setContext",
    value: function setContext(context) {
      var clip = this._attrs.attrs.clip;
      context.save();
      if (clip && !clip._attrs.destroyed) {
        clip.resetTransform(context);
        clip.createPath(context);
        context.clip();
      }
      this.resetContext(context);
      this.resetTransform(context);
    }
  }, {
    key: "restoreContext",
    value: function restoreContext(context) {
      context.restore();
    }
  }, {
    key: "resetContext",
    value: function resetContext(context) {
      var elAttrs = this._attrs.attrs;
      for (var k in elAttrs) {
        if (SHAPE_ATTRS.indexOf(k) > -1) {
          var v = elAttrs[k];
          if ((k === 'fillStyle' || k === 'strokeStyle') && v) {
            v = parseStyle(v, this, context);
          }
          if (k === 'lineDash' && context.setLineDash && isArray(v)) {
            context.setLineDash(v);
          } else {
            context[k] = v;
          }
        }
      }
    }
  }, {
    key: "hasFill",
    value: function hasFill() {
      return this.get('canFill') && this._attrs.attrs.fillStyle;
    }
  }, {
    key: "hasStroke",
    value: function hasStroke() {
      return this.get('canStroke') && this._attrs.attrs.strokeStyle;
    }
  }, {
    key: "drawInner",
    value: function drawInner(_context) {}
  }, {
    key: "show",
    value: function show() {
      this.set('visible', true);
      return this;
    }
  }, {
    key: "hide",
    value: function hide() {
      this.set('visible', false);
      return this;
    }
  }, {
    key: "isVisible",
    value: function isVisible() {
      return this.get('visible');
    }
  }, {
    key: "getAriaLabel",
    value: function getAriaLabel() {
      var _this$_attrs2 = this._attrs,
        destroyed = _this$_attrs2.destroyed,
        visible = _this$_attrs2.visible,
        isShape = _this$_attrs2.isShape,
        aria = _this$_attrs2.aria;
      if (destroyed || !visible || isShape && !aria) {
        return;
      }
      return this._getAriaLabel();
    }
  }, {
    key: "_getAriaLabel",
    value: function _getAriaLabel() {
      return this._attrs.ariaLabel;
    }
  }, {
    key: "_removeFromParent",
    value: function _removeFromParent() {
      var parent = this.get('parent');
      if (parent) {
        var children = parent.get('children');
        arrayRemove(children, this);
      }
      return this;
    }
  }, {
    key: "remove",
    value: function remove(destroy) {
      if (destroy) {
        this.destroy();
      } else {
        this._removeFromParent();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var destroyed = this.get('destroyed');
      if (destroyed) {
        return null;
      }
      this._removeFromParent();
      // 保留 attrs
      var attrs = this._attrs.attrs;
      this._attrs = {
        attrs: attrs
      };
      this.set('destroyed', true);
    }
  }, {
    key: "getBBox",
    value: function getBBox() {
      return {
        minX: 0,
        maxX: 0,
        minY: 0,
        maxY: 0,
        width: 0,
        height: 0
      };
    }
  }, {
    key: "initTransform",
    value: function initTransform() {
      var attrs = this._attrs.attrs;
      if (!attrs) {
        attrs = {};
      }
      if (!attrs.matrix) {
        attrs.matrix = [1, 0, 0, 1, 0, 0];
      }
      this._attrs.attrs = attrs;
    }
  }, {
    key: "getMatrix",
    value: function getMatrix() {
      return this._attrs.attrs.matrix;
    }
  }, {
    key: "setMatrix",
    value: function setMatrix(m) {
      this._attrs.attrs.matrix = [m[0], m[1], m[2], m[3], m[4], m[5]];
    }
  }, {
    key: "transform",
    value: function transform(actions) {
      var matrix = this._attrs.attrs.matrix;
      this._attrs.attrs.matrix = MatrixUtil.transform(matrix, actions);
      return this;
    }
  }, {
    key: "setTransform",
    value: function setTransform(actions) {
      this._attrs.attrs.matrix = [1, 0, 0, 1, 0, 0];
      return this.transform(actions);
    }
  }, {
    key: "translate",
    value: function translate(x, y) {
      var matrix = this._attrs.attrs.matrix;
      MatrixUtil.translate(matrix, matrix, [x, y]);
    }
  }, {
    key: "rotate",
    value: function rotate(rad) {
      var matrix = this._attrs.attrs.matrix;
      MatrixUtil.rotate(matrix, matrix, rad);
    }
  }, {
    key: "scale",
    value: function scale(sx, sy) {
      var matrix = this._attrs.attrs.matrix;
      MatrixUtil.scale(matrix, matrix, [sx, sy]);
    }
  }, {
    key: "moveTo",
    value: function moveTo(x, y) {
      var cx = this._attrs.x || 0;
      var cy = this._attrs.y || 0;
      this.translate(x - cx, y - cy);
      this.set('x', x);
      this.set('y', y);
    }
  }, {
    key: "apply",
    value: function apply(v) {
      var m = this._attrs.attrs.matrix;
      Vector2.transformMat2d(v, v, m);
      return this;
    }
  }, {
    key: "resetTransform",
    value: function resetTransform(context) {
      var mo = this._attrs.attrs.matrix;
      if (MatrixUtil.isChanged(mo)) {
        context.transform(mo[0], mo[1], mo[2], mo[3], mo[4], mo[5]);
      }
    }
  }, {
    key: "isDestroyed",
    value: function isDestroyed() {
      return this.get('destroyed');
    }
  }]);
  return Element;
}();
export default Element;
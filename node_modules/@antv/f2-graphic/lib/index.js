"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BBox = void 0;
Object.defineProperty(exports, "Canvas", {
  enumerable: true,
  get: function get() {
    return _engine.Canvas;
  }
});
Object.defineProperty(exports, "Group", {
  enumerable: true,
  get: function get() {
    return _engine.Group;
  }
});
Object.defineProperty(exports, "Matrix", {
  enumerable: true,
  get: function get() {
    return _matrix.default;
  }
});
Object.defineProperty(exports, "Shape", {
  enumerable: true,
  get: function get() {
    return _engine.Shape;
  }
});
exports.Types = exports.Smooth = void 0;
Object.defineProperty(exports, "Vector2", {
  enumerable: true,
  get: function get() {
    return _vector.default;
  }
});
exports.createCanvas = createCanvas;
exports.getEngine = getEngine;
exports.registerEngine = registerEngine;
var _matrix = _interopRequireDefault(require("./util/matrix"));
var _vector = _interopRequireDefault(require("./util/vector2"));
var Smooth = _interopRequireWildcard(require("./util/smooth"));
exports.Smooth = Smooth;
var BBox = _interopRequireWildcard(require("./util/bbox"));
exports.BBox = BBox;
var _engine = require("./engine");
var Types = _interopRequireWildcard(require("./types"));
exports.Types = Types;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var engines = {};
function registerEngine(name, engine) {
  engines[name] = engine;
}
function getEngine(name) {
  var G = engines[name];
  if (G) {
    return G;
  }
  return {
    Canvas: _engine.Canvas,
    Group: _engine.Group,
    Shape: _engine.Shape
  };
}
function createCanvas(cfg) {
  var renderer = cfg.renderer;
  var G = getEngine(renderer);
  return new G.Canvas(cfg);
}
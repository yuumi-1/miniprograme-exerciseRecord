"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _util = require("@antv/util");
var _rect = _interopRequireDefault(require("./shape/rect"));
var _container = _interopRequireDefault(require("./container"));
var _vector = _interopRequireDefault(require("../util/vector2"));
var Group = /*#__PURE__*/function (_Rect) {
  (0, _inherits2.default)(Group, _Rect);
  var _super = (0, _createSuper2.default)(Group);
  function Group() {
    (0, _classCallCheck2.default)(this, Group);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Group, [{
    key: "_initProperties",
    value: /* eslint-enable */
    function _initProperties() {
      this._attrs = {
        type: 'group',
        zIndex: 0,
        visible: true,
        destroyed: false,
        isGroup: true,
        canFill: true,
        canStroke: true,
        children: [],
        attrs: {
          x: 0,
          y: 0,
          width: 0,
          height: 0,
          radius: 0,
          lineWidth: 0
        }
      };
    }
  }, {
    key: "getBBox",
    value: function getBBox() {
      var minX = Infinity;
      var maxX = -Infinity;
      var minY = Infinity;
      var maxY = -Infinity;
      var children = this.get('children');
      for (var i = 0, length = children.length; i < length; i++) {
        var child = children[i];
        if (child.get('visible')) {
          var box = child.getBBox();
          if (!box) {
            continue;
          }
          var leftTop = [box.minX, box.minY];
          var leftBottom = [box.minX, box.maxY];
          var rightTop = [box.maxX, box.minY];
          var rightBottom = [box.maxX, box.maxY];
          var matrix = child.attr('matrix');
          _vector.default.transformMat2d(leftTop, leftTop, matrix);
          _vector.default.transformMat2d(leftBottom, leftBottom, matrix);
          _vector.default.transformMat2d(rightTop, rightTop, matrix);
          _vector.default.transformMat2d(rightBottom, rightBottom, matrix);
          minX = Math.min(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0], minX);
          maxX = Math.max(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0], maxX);
          minY = Math.min(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1], minY);
          maxY = Math.max(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1], maxY);
        }
      }
      return {
        minX: minX,
        minY: minY,
        maxX: maxX,
        maxY: maxY,
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      // 只有在有fillStyle或strokeStyle 时才需要绘制
      if (!attrs.fillStyle && !attrs.strokeStyle) {
        return;
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(Group.prototype), "createPath", this).call(this, context);
    }
  }, {
    key: "drawInner",
    value: function drawInner(context) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Group.prototype), "drawInner", this).call(this, context);
      this.drawChildren(context);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.get('destroyed')) {
        return;
      }
      this.clear();
      (0, _get2.default)((0, _getPrototypeOf2.default)(Group.prototype), "destroy", this).call(this);
    }
  }]);
  return Group;
}(_rect.default); // @ts-ignore
(0, _util.mix)(Group.prototype, _container.default, {
  getGroupClass: function getGroupClass() {
    return Group;
  }
});
var _default = Group;
exports.default = _default;
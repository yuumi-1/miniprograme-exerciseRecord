import { ElementAttrs } from '../types';
export interface ElementProp {
    type?: string;
    attrs?: ElementAttrs;
    zIndex?: number;
    visible?: boolean;
    destroyed?: boolean;
    bbox?: {
        x: number;
        y: number;
        minX: number;
        maxX: number;
        minY: number;
        maxY: number;
        width: number;
        height: number;
    };
    isGroup?: boolean;
    isShape?: boolean;
    parent?: Element;
    children?: Element[];
    context?: CanvasRenderingContext2D;
    canFill?: boolean;
    canStroke?: boolean;
    aria?: boolean;
    ariaLabel?: string;
    x?: number;
    y?: number;
}
declare class Element<T extends ElementProp = ElementProp> {
    _attrs: T;
    _initProperties(): void;
    constructor(cfg: any);
    get<K extends keyof T>(name: K): T[K];
    set(name: keyof T, value: any): void;
    isGroup(): T["isGroup"];
    isShape(): T["isShape"];
    initAttrs(attrs: any): void;
    getDefaultAttrs(): {};
    _setAttr(name: any, value: any): void;
    _getAttr(name: any): any;
    _afterAttrsSet(): void;
    _setAttrClip(clip: any): any;
    attr(name: any, value?: any): any;
    getParent(): T["parent"];
    draw(context: any): void;
    setContext(context: any): void;
    restoreContext(context: any): void;
    resetContext(context: any): void;
    hasFill(): string;
    hasStroke(): string;
    drawInner(_context: any): void;
    show(): this;
    hide(): this;
    isVisible(): T["visible"];
    getAriaLabel(): string;
    _getAriaLabel(): string;
    _removeFromParent(): this;
    remove(destroy: any): void;
    destroy(): any;
    getBBox(): {
        minX: number;
        maxX: number;
        minY: number;
        maxY: number;
        width: number;
        height: number;
    };
    initTransform(): void;
    getMatrix(): number[];
    setMatrix(m: any): void;
    transform(actions: any): this;
    setTransform(actions: any): this;
    translate(x: any, y: any): void;
    rotate(rad: any): void;
    scale(sx: any, sy: any): void;
    moveTo(x: any, y: any): void;
    apply(v: any): this;
    resetTransform(context: any): void;
    isDestroyed(): T["destroyed"];
}
export default Element;

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _shape = _interopRequireDefault(require("./shape"));
var _bbox = require("../../util/bbox");
var Smooth = _interopRequireWildcard(require("../../util/smooth"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// filter the point which x or y is NaN
function _filterPoints(points) {
  var filteredPoints = [];
  for (var i = 0, len = points.length; i < len; i++) {
    var point = points[i];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      filteredPoints.push(point);
    }
  }
  return filteredPoints;
}
var Polyline = /*#__PURE__*/function (_Shape) {
  (0, _inherits2.default)(Polyline, _Shape);
  var _super = (0, _createSuper2.default)(Polyline);
  function Polyline() {
    (0, _classCallCheck2.default)(this, Polyline);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Polyline, [{
    key: "_initProperties",
    value: function _initProperties() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Polyline.prototype), "_initProperties", this).call(this);
      this._attrs.canFill = true;
      this._attrs.canStroke = true;
      this._attrs.type = 'polyline';
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {
        points: null,
        lineWidth: 1,
        smooth: false
      };
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      var points = attrs.points,
        smooth = attrs.smooth;
      var filteredPoints = _filterPoints(points);
      context.beginPath();
      if (filteredPoints.length) {
        context.moveTo(filteredPoints[0].x, filteredPoints[0].y);
        if (smooth) {
          var constaint = [[0, 0], [1, 1]];
          var sps = Smooth.smooth(filteredPoints, false, constaint);
          for (var i = 0, n = sps.length; i < n; i++) {
            var sp = sps[i];
            context.bezierCurveTo(sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]);
          }
        } else {
          var _i;
          var l;
          for (_i = 1, l = filteredPoints.length - 1; _i < l; _i++) {
            context.lineTo(filteredPoints[_i].x, filteredPoints[_i].y);
          }
          context.lineTo(filteredPoints[l].x, filteredPoints[l].y);
        }
      }
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      var attrs = this.get('attrs');
      var points = attrs.points,
        smooth = attrs.smooth,
        lineWidth = attrs.lineWidth;
      var filteredPoints = _filterPoints(points);
      if (smooth) {
        var newPoints = [];
        var constaint = [[0, 0], [1, 1]];
        var sps = Smooth.smooth(filteredPoints, false, constaint);
        for (var i = 0, n = sps.length; i < n; i++) {
          var sp = sps[i];
          if (i === 0) {
            newPoints.push([filteredPoints[0].x, filteredPoints[0].y, sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);
          } else {
            var lastPoint = sps[i - 1];
            newPoints.push([lastPoint[5], lastPoint[6], sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);
          }
        }
        return (0, _bbox.getBBoxFromBezierGroup)(newPoints, lineWidth);
      }
      return (0, _bbox.getBBoxFromPoints)(filteredPoints, lineWidth);
    }
  }]);
  return Polyline;
}(_shape.default);
var _default = Polyline;
exports.default = _default;
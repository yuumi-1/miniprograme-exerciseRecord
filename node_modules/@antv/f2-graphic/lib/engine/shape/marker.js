"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _util = require("@antv/util");
var _shape = _interopRequireDefault(require("./shape"));
/**
 * marker shapesï¼Œused for tooltip and legend
 */

var SYMBOLS = {
  circle: function circle(x, y, r, ctx) {
    ctx.arc(x, y, r, 0, Math.PI * 2, false);
  },
  square: function square(x, y, r, ctx) {
    ctx.moveTo(x - r, y - r);
    ctx.lineTo(x + r, y - r);
    ctx.lineTo(x + r, y + r);
    ctx.lineTo(x - r, y + r);
    ctx.closePath();
  }
};
var Marker = /*#__PURE__*/function (_Shape) {
  (0, _inherits2.default)(Marker, _Shape);
  var _super = (0, _createSuper2.default)(Marker);
  function Marker() {
    (0, _classCallCheck2.default)(this, Marker);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Marker, [{
    key: "_initProperties",
    value: function _initProperties() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Marker.prototype), "_initProperties", this).call(this);
      this._attrs.canFill = true;
      this._attrs.canStroke = true;
      this._attrs.type = 'marker';
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {
        x: 0,
        y: 0,
        lineWidth: 0
      };
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        radius = attrs.radius;
      var symbol = attrs.symbol || 'circle';
      var method;
      if ((0, _util.isFunction)(symbol)) {
        method = symbol;
      } else {
        method = SYMBOLS[symbol];
      }
      context.beginPath();
      method(x, y, radius, context, this);
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        radius = attrs.radius;
      return {
        minX: x - radius,
        minY: y - radius,
        maxX: x + radius,
        maxY: y + radius
      };
    }
  }]);
  return Marker;
}(_shape.default);
var _default = Marker;
exports.default = _default;
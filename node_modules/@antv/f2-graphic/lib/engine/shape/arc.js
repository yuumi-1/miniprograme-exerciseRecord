"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _shape = _interopRequireDefault(require("./shape"));
var _bbox = require("../../util/bbox");
var Arc = /*#__PURE__*/function (_Shape) {
  (0, _inherits2.default)(Arc, _Shape);
  var _super = (0, _createSuper2.default)(Arc);
  function Arc() {
    (0, _classCallCheck2.default)(this, Arc);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Arc, [{
    key: "_initProperties",
    value: function _initProperties() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Arc.prototype), "_initProperties", this).call(this);
      this._attrs.canStroke = true;
      this._attrs.canFill = true;
      this._attrs.type = 'arc';
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {
        x: 0,
        y: 0,
        r: 0,
        startAngle: 0,
        endAngle: Math.PI * 2,
        anticlockwise: false,
        lineWidth: 1
      };
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        r = attrs.r,
        startAngle = attrs.startAngle,
        endAngle = attrs.endAngle,
        anticlockwise = attrs.anticlockwise;
      context.beginPath();
      if (startAngle !== endAngle) {
        context.arc(x, y, r, startAngle, endAngle, anticlockwise);
      }
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        r = attrs.r,
        startAngle = attrs.startAngle,
        endAngle = attrs.endAngle,
        anticlockwise = attrs.anticlockwise;
      return (0, _bbox.getBBoxFromArc)(x, y, r, startAngle, endAngle, anticlockwise);
    }
  }]);
  return Arc;
}(_shape.default);
var _default = Arc;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _shape = _interopRequireDefault(require("./shape"));
var _util = require("@antv/util");
function parsePadding(padding) {
  var top = 0;
  var right = 0;
  var bottom = 0;
  var left = 0;
  if ((0, _util.isNumber)(padding)) {
    top = bottom = left = right = padding;
  } else if ((0, _util.isArray)(padding)) {
    top = padding[0];
    right = !(0, _util.isNil)(padding[1]) ? padding[1] : padding[0];
    bottom = !(0, _util.isNil)(padding[2]) ? padding[2] : padding[0];
    left = !(0, _util.isNil)(padding[3]) ? padding[3] : right;
  }
  return [top, right, bottom, left];
}
// 为了处理radius 大于 width 或 height 的场景
function parseRadius(radius, width, height) {
  radius = parsePadding(radius);
  // 都为0
  if (!radius[0] && !radius[1] && !radius[2] && !radius[3]) {
    return radius;
  }
  var minWidth = Math.max(radius[0] + radius[1], radius[2] + radius[3]);
  var minHeight = Math.max(radius[0] + radius[3], radius[1] + radius[2]);
  var scale = Math.min(width / minWidth, height / minHeight);
  if (scale < 1) {
    return radius.map(function (r) {
      return r * scale;
    });
  }
  return radius;
}
var Rect = /*#__PURE__*/function (_Shape) {
  (0, _inherits2.default)(Rect, _Shape);
  var _super = (0, _createSuper2.default)(Rect);
  function Rect() {
    (0, _classCallCheck2.default)(this, Rect);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Rect, [{
    key: "_initProperties",
    value: function _initProperties() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Rect.prototype), "_initProperties", this).call(this);
      this._attrs.canFill = true;
      this._attrs.canStroke = true;
      this._attrs.type = 'rect';
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        radius: 0,
        lineWidth: 0
      };
    }
  }, {
    key: "createRadiusPath",
    value: function createRadiusPath(context, x, y, width, height, radius) {
      radius = parseRadius(radius, width, height);
      context.moveTo(x + radius[0], y);
      context.lineTo(x + width - radius[1], y);
      context.arc(x + width - radius[1], y + radius[1], radius[1], -Math.PI / 2, 0, false);
      context.lineTo(x + width, y + height - radius[2]);
      context.arc(x + width - radius[2], y + height - radius[2], radius[2], 0, Math.PI / 2, false);
      context.lineTo(x + radius[3], y + height);
      context.arc(x + radius[3], y + height - radius[3], radius[3], Math.PI / 2, Math.PI, false);
      context.lineTo(x, y + radius[0]);
      context.arc(x + radius[0], y + radius[0], radius[0], Math.PI, Math.PI * 3 / 2, false);
      context.closePath();
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        width = attrs.width,
        height = attrs.height,
        radius = attrs.radius;
      context.beginPath();
      if (!radius || !(width * height)) {
        context.rect(x, y, width, height);
      } else {
        this.createRadiusPath(context, x, y, width, height, radius);
      }
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        width = attrs.width,
        height = attrs.height;
      return {
        minX: x,
        minY: y,
        maxX: x + width,
        maxY: y + height
      };
    }
  }]);
  return Rect;
}(_shape.default);
var _default = Rect;
exports.default = _default;
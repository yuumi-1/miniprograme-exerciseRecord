"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _shape = _interopRequireDefault(require("./shape"));
var _bbox = require("../../util/bbox");
var Sector = /*#__PURE__*/function (_Shape) {
  (0, _inherits2.default)(Sector, _Shape);
  var _super = (0, _createSuper2.default)(Sector);
  function Sector() {
    (0, _classCallCheck2.default)(this, Sector);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Sector, [{
    key: "_initProperties",
    value: function _initProperties() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Sector.prototype), "_initProperties", this).call(this);
      this._attrs.canFill = true;
      this._attrs.canStroke = true;
      this._attrs.type = 'sector';
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {
        x: 0,
        y: 0,
        lineWidth: 0,
        r: 0,
        r0: 0,
        startAngle: 0,
        endAngle: Math.PI * 2,
        anticlockwise: false
      };
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        startAngle = attrs.startAngle,
        r = attrs.r,
        r0 = attrs.r0,
        anticlockwise = attrs.anticlockwise;
      // 最大为整个圆
      var endAngle = Math.min(attrs.endAngle, startAngle + Math.PI * 2);
      context.beginPath();
      var unitX = Math.cos(startAngle);
      var unitY = Math.sin(startAngle);
      context.moveTo(unitX * r0 + x, unitY * r0 + y);
      context.lineTo(unitX * r + x, unitY * r + y);
      // 当扇形的角度非常小的时候，就不进行弧线的绘制；或者整个只有1个扇形时，会出现end<0的情况不绘制
      if (Math.abs(endAngle - startAngle) > 0.0001 || startAngle === 0 && endAngle < 0) {
        context.arc(x, y, r, startAngle, endAngle, anticlockwise);
        context.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);
        if (r0 !== 0) {
          context.arc(x, y, r0, endAngle, startAngle, !anticlockwise);
        }
      }
      context.closePath();
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      var attrs = this.get('attrs');
      var x = attrs.x,
        y = attrs.y,
        r = attrs.r,
        r0 = attrs.r0,
        startAngle = attrs.startAngle,
        endAngle = attrs.endAngle,
        anticlockwise = attrs.anticlockwise;
      var outerBBox = (0, _bbox.getBBoxFromArc)(x, y, r, startAngle, endAngle, anticlockwise);
      var innerBBox = (0, _bbox.getBBoxFromArc)(x, y, r0, startAngle, endAngle, anticlockwise);
      return {
        minX: Math.min(outerBBox.minX, innerBBox.minX),
        minY: Math.min(outerBBox.minY, innerBBox.minY),
        maxX: Math.max(outerBBox.maxX, innerBBox.maxX),
        maxY: Math.max(outerBBox.maxY, innerBBox.maxY)
      };
    }
  }]);
  return Sector;
}(_shape.default);
var _default = Sector;
exports.default = _default;
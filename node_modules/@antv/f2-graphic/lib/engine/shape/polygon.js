"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _shape = _interopRequireDefault(require("./shape"));
var _bbox = require("../../util/bbox");
var Polygon = /*#__PURE__*/function (_Shape) {
  (0, _inherits2.default)(Polygon, _Shape);
  var _super = (0, _createSuper2.default)(Polygon);
  function Polygon() {
    (0, _classCallCheck2.default)(this, Polygon);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Polygon, [{
    key: "_initProperties",
    value: function _initProperties() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Polygon.prototype), "_initProperties", this).call(this);
      this._attrs.canFill = true;
      this._attrs.canStroke = true;
      this._attrs.type = 'polygon';
    }
  }, {
    key: "getDefaultAttrs",
    value: function getDefaultAttrs() {
      return {
        points: null,
        lineWidth: 0
      };
    }
  }, {
    key: "createPath",
    value: function createPath(context) {
      var attrs = this.get('attrs');
      var points = attrs.points;
      context.beginPath();
      for (var i = 0, len = points.length; i < len; i++) {
        var point = points[i];
        if (i === 0) {
          context.moveTo(point.x, point.y);
        } else {
          context.lineTo(point.x, point.y);
        }
      }
      context.closePath();
    }
  }, {
    key: "calculateBox",
    value: function calculateBox() {
      var attrs = this.get('attrs');
      var points = attrs.points;
      return (0, _bbox.getBBoxFromPoints)(points);
    }
  }]);
  return Polygon;
}(_shape.default);
var _default = Polygon;
exports.default = _default;
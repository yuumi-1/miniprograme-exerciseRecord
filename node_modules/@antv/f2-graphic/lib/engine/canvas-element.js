"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));
var _emit = _interopRequireDefault(require("../event/emit"));
var CanvasElement = /*#__PURE__*/function (_EventEmit) {
  (0, _inherits2.default)(CanvasElement, _EventEmit);
  var _super = (0, _createSuper2.default)(CanvasElement);
  /* eslint-enable */
  function CanvasElement(ctx) {
    var _this;
    (0, _classCallCheck2.default)(this, CanvasElement);
    _this = _super.call(this);
    _this.context = ctx;
    // canvas实际的宽高 (width/height) * pixelRatio
    // 有可能是 node canvas 创建的 context 对象
    var canvas = ctx.canvas || {};
    _this.width = canvas.width || 0;
    _this.height = canvas.height || 0;
    _this.style = {};
    _this.currentStyle = {};
    _this.attrs = {};
    // 用来标识是CanvasElement实例
    _this.isCanvasElement = true;
    return _this;
  }
  (0, _createClass2.default)(CanvasElement, [{
    key: "getContext",
    value: function getContext( /* type */
    ) {
      return this.context;
    }
  }, {
    key: "getBoundingClientRect",
    value: function getBoundingClientRect() {
      var width = this.width;
      var height = this.height;
      // 默认都处理成可视窗口的顶部位置
      return {
        top: 0,
        right: width,
        bottom: height,
        left: 0
      };
    }
  }, {
    key: "setAttribute",
    value: function setAttribute(key, value) {
      this.attrs[key] = value;
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      this.on(type, listener);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, listener) {
      this.off(type, listener);
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(type, e) {
      this.emit(type, e);
    }
  }]);
  return CanvasElement;
}(_emit.default);
function supportEventListener(canvas) {
  if (!canvas) {
    return false;
  }
  // 非 HTMLCanvasElement
  if (canvas.nodeType !== 1 || !canvas.nodeName || canvas.nodeName.toLowerCase() !== 'canvas') {
    return false;
  }
  // 微信小程序canvas.getContext('2d')时也是CanvasRenderingContext2D
  // 也会有ctx.canvas, 而且nodeType也是1，所以还要在看下是否支持addEventListener
  var support = false;
  try {
    canvas.addEventListener('eventTest', function () {
      support = true;
    });
    canvas.dispatchEvent(new Event('eventTest'));
  } catch (error) {
    support = false;
  }
  return support;
}
var _default = {
  create: function create(ctx) {
    if (!ctx) {
      return null;
    }
    if (supportEventListener(ctx.canvas)) {
      return ctx.canvas;
    }
    return new CanvasElement(ctx);
  }
};
exports.default = _default;
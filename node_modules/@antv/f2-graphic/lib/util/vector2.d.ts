/**
 * 2 Dimensional Vector
 * @module vector2
 */
declare const _default: {
    /**
     * Creates a new, empty vector2
     *
     * @return {vector2} a new 2D vector
     */
    create(): number[];
    /**
     * Calculates the length of a vector2
     *
     * @param {vector2} v vector to calculate length of
     * @return {Number} length of v
     */
    length(v: any): number;
    /**
     * Normalize a vector2
     *
     * @param {vector2} out the receiving vector
     * @param {vector2} v vector to normalize
     * @return {vector2} out
     */
    normalize(out: any, v: any): any;
    /**
     * Adds two vector2's
     *
     * @param {vector2} out the receiving vector
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @return {vector2} out
     */
    add(out: any, v1: any, v2: any): any;
    /**
     * Subtracts vector v2 from vector v1
     *
     * @param {vector2} out the receiving vector
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @return {vector2} out
     */
    sub(out: any, v1: any, v2: any): any;
    /**
     * Scales a vector2 by a scalar number
     *
     * @param {vector2} out the receiving vector
     * @param {vector2} v the vector to scale
     * @param {Number} s amount to scale the vector by
     * @return {vector2} out
     */
    scale(out: any, v: any, s: any): any;
    /**
     * Calculates the dot product of two vector2's
     *
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @return {Number} dot product of v1 and v2
     */
    dot(v1: any, v2: any): number;
    /**
     * Calculates the direction of two vector2's
     *
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @return {Boolean} the direction of v1 and v2
     */
    direction(v1: any, v2: any): number;
    /**
     * Calculates the angle of two vector2's
     *
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @return {Number} angle of v1 and v2
     */
    angle(v1: any, v2: any): number;
    /**
     * Calculates the angle of two vector2's with direction
     *
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @param {Boolean} direction the direction of two vector2's
     * @return {Number} angle of v1 and v2
     */
    angleTo(v1: any, v2: any, direction: any): any;
    /**
     * whether a vector2 is zero vector
     *
     * @param  {vector2} v vector to calculate
     * @return {Boolean}   is or not a zero vector
     */
    zero(v: any): boolean;
    /**
     * Calculates the euclidian distance between two vector2's
     *
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @return {Number} distance between a and b
     */
    distance(v1: any, v2: any): number;
    /**
     * Creates a new vector2 initialized with values from an existing vector
     *
     * @param {vector2} v vector to clone
     * @return {Array} a new 2D vector
     */
    clone(v: any): any[];
    /**
     * Return the minimum of two vector2's
     *
     * @param {vector2} out the receiving vector
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @return {vector2} out
     */
    min(out: any, v1: any, v2: any): any;
    /**
     * Return the maximum of two vector2's
     *
     * @param {vector2} out the receiving vector
     * @param {vector2} v1 the first operand
     * @param {vector2} v2 the second operand
     * @return {vector2} out
     */
    max(out: any, v1: any, v2: any): any;
    /**
     * Transforms the vector2 with a mat2d
     *
     * @param {vector2} out the receiving vector
     * @param {vector2} v the vector to transform
     * @param {mat2d} m matrix to transform with
     * @return {vector2} out
     */
    transformMat2d(out: any, v: any, m: any): any;
};
export default _default;
